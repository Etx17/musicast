<div class="container mt-4">
  <!-- Application file button - only displayed when complete -->
  <% if @inscription.has_complete_requirement_items? && @inscription.is_payed? && @inscription.has_complete_airs? %>
    <div class="d-flex justify-content-end mb-3">
      <%= link_to inscription_path(@inscription), class: "btn btn-success" do %>
        <i class="fas fa-folder-open me-2"></i> Votre dossier d'inscription
      <% end %>
    </div>
  <% end %>

  <!-- Include the progress bar partial -->
  <%= render 'progress_bar' %>

  <div class="card shadow-sm mb-4">
    <div class="card-header bg-light">
      <h2 class="mb-0"><%= t('inscriptions.steps.item_requirements.title') %></h2>
    </div>
    <div class="card-body">
      <% if @inscription.errors.any? %>
        <div class=" text-danger alert-danger">
          <h4><%= @inscription.errors.count %> error(s) prevented this form from being saved:</h4>
          <ul>
            <% @inscription.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <%= form_for @inscription, url: wizard_path(:item_requirements, action: "update"), method: :put, html: { id: "item-requirements-form" } do |f| %>
        <div class="d-flex flex-wrap gap-2">
          <% @inscription.inscription_item_requirements.each do |item_requirement| %>
            <div class="card m-2" style="width: calc(50% - 24px); max-height: 500px; overflow-y: auto;">
              <div class="card-body bg-white">
                <div class="d-flex align-items-center gap-3 p-2">
                  <%= image_tag icon_for(item_requirement.item_type), class: 'item-icon', width: 50, height: 50 %>
                  <% if I18n.locale == :en && item_requirement.requirement_item.title_english.present? %>
                    <h3><%= item_requirement.requirement_item.title_english %></h3>
                  <% else %>
                    <h3><%= item_requirement.requirement_item.title %></h3>
                  <% end %>
                </div>

                <% if I18n.locale == :en && item_requirement.requirement_item.description_item_english.present? %>
                  <div class="d-flex align-items-start small text-secondary p-2 bg-infobox-light rounded-3 border mb-2">
                    <i class="fas fa-info-circle mt-1 me-2"></i>
                    <p class="mb-0"><%= item_requirement.requirement_item.description_item_english %></p>
                  </div>
                <% else %>
                  <div class="d-flex align-items-start small text-secondary p-2 bg-infobox-light rounded-3 border mb-2">
                    <i class="fas fa-info-circle mt-1 me-2"></i>
                    <p class="mb-0"><%= item_requirement.requirement_item.description_item %></p>
                  </div>
                <% end %>

                <%= f.simple_fields_for :inscription_item_requirements, item_requirement do |irf| %>
                  <%= irf.hidden_field :requirement_item_id %>
                  <% case item_requirement.requirement_item.type_item %>
                  <% when 'motivation_essay' %>
                    <div class="form-group" data-controller="character-counter">
                      <div class="d-flex gap-3 align-items-center">
                        <%= f.label t('inscriptions.steps.item_requirements.motivation_letter'), required: true %>
                        <small class="text-secondary"><span data-character-counter-target="counter">0</span>/1000 </small>
                      </div>
                      <%= irf.input :submitted_content, label: false, as: :text,
                                    input_html: {
                                      style: 'height: 300px;',
                                      data: {
                                        action: "input->character-counter#update",
                                        character_counter_target: "input",
                                        class: "border border-0"
                                      },
                                      class: irf.object.submitted_content.present? ? "is-valid" : "",
                                      required: true
                                    } %>
                    </div>
                  <% when 'youtube_link' %>
                    <%= irf.input :submitted_content, as: :url,
                                  label: t('inscriptions.steps.item_requirements.youtube_link'),
                                  hint: t('inscriptions.steps.item_requirements.youtube_link_hint'),
                                  input_html: {
                                    class: irf.object.submitted_content.present? ? "is-valid" : "",
                                    data: { action: "input->file-validator#validateYouTubeUrl" }
                                  },
                                  required: true %>
                  <% when 'photo' %>
                    <%# ["16:9 (Paysage widescreen)", 1.778], display the ratio as string like that
                             ["4:3 (Paysage standard)", 1.333],
                             ["1:1 (CarrÃ©)", 1.0],
                             ["3:4 (Portrait standard)", 0.75],
                             ["9:16 (Portrait mobile)", 0.5625] %>
                    <%= irf.input :submitted_file, as: :file,
                                  label: "Photo ahah",
                                  input_html: {
                                    class: "file-input",
                                    data: { action: "change->file-validator#validateFile" }
                                  } %>
                  <% else %>
                    <div class="row">
                      <div class="col">
                        <% if irf.object.submitted_file.attached? && irf.object.submitted_file.persisted? %>
                          <div class="mb-3">
                            <label class="form-label"><%= t('inscriptions.steps.item_requirements.current_document') %></label>
                            <div class="d-flex align-items-center">
                              <span class="badge bg-success me-2"><i class="fas fa-check"></i> <%= t('inscriptions.steps.item_requirements.uploaded') %></span>
                              <%= link_to t('global.actions.view'), url_for(irf.object.submitted_file), class: "btn btn-sm btn-outline-primary", target: "_blank" %>
                            </div>
                            <embed src="<%= url_for(irf.object.submitted_file) %>" width="100%" height="200" type="application/pdf" class="mt-2">
                          </div>
                          <%= irf.input :submitted_file, as: :file,
                                       label: t('inscriptions.steps.item_requirements.replace_document'),
                                       input_html: {
                                         class: "file-input",
                                         data: {
                                           action: "change->file-validator#validateFile",
                                           file_validator_accepted_types: "application/pdf",
                                           file_validator_max_size: "10",
                                           requirement_item_id: item_requirement.requirement_item.id
                                         }
                                       } %>
                          <div class="invalid-feedback file-error-message" style="display: none;">
                            <%= t('inscriptions.steps.item_requirements.pdf_file_error') %>
                          </div>
                        <% else %>
                          <%= irf.input :submitted_file, as: :file,
                                       label: t('inscriptions.steps.item_requirements.upload_pdf'),
                                       input_html: {
                                         class: "file-input",
                                         data: {
                                           action: "change->file-validator#validateFile",
                                           file_validator_accepted_types: "application/pdf",
                                           file_validator_max_size: "10",
                                           requirement_item_id: item_requirement.requirement_item.id
                                         }
                                       },
                                       required: true %>
                          <div class="invalid-feedback file-error-message" style="display: none;">
                            <%= t('inscriptions.steps.item_requirements.pdf_file_error') %>
                          </div>
                        <% end %>
                      </div>
                    </div>
                  <% end %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>

        <div class="d-flex justify-content-between mt-4">
          <%= link_to previous_wizard_path, class: "btn btn-outline-secondary" do %>
            <i class="fas fa-arrow-left me-1"></i> Previous
          <% end %>
          <%= f.submit "Next", class: "btn btn-primary", id: "submit-button" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const fileValidator = {
      init() {
        document.querySelectorAll('.file-input').forEach(input => {
          input.addEventListener('change', this.validateFileInputEvent.bind(this));
        });

        document.querySelectorAll('[data-action*="input->file-validator#validateYouTubeUrl"]').forEach(input => {
          input.addEventListener('input', this.validateYouTubeUrlEvent.bind(this));
        });

        const form = document.getElementById('item-requirements-form');
        if (form) {
          form.addEventListener('submit', this.validateFormSubmission.bind(this));
        }
      },

      validateFileInputEvent(event) {
        const input = event.target;
        const file = input.files[0];
        const errorElement = input.parentElement.nextElementSibling;
        const formGroup = input.closest('.form-group');

        if (!file) {
          input.classList.remove('is-valid');
          input.classList.remove('is-invalid');
          if (errorElement) errorElement.style.display = 'none';
          return true;
        }

        const acceptedTypes = input.dataset.fileValidatorAcceptedTypes.split(',');
        const maxSizeMB = parseFloat(input.dataset.fileValidatorMaxSize);

        const isValidType = acceptedTypes.includes(file.type);

        const isValidSize = file.size <= (maxSizeMB * 1024 * 1024);

        if (!isValidType || !isValidSize) {
          input.classList.add('is-invalid');
          input.classList.remove('is-valid');
          if (errorElement) {
            errorElement.style.display = 'block';
            if (!isValidType) {
              errorElement.textContent = t('inscriptions.form.invalid_file_type', { type: file.type });
            } else {
              errorElement.textContent = t('inscriptions.form.file_too_large', { max: maxSizeMB, current: (file.size / (1024 * 1024)).toFixed(2) });
            }
          }
          return false;
        } else {
          input.classList.add('is-valid');
          input.classList.remove('is-invalid');
          if (errorElement) errorElement.style.display = 'none';
          return true;
        }
      },

      validateYouTubeUrlEvent(event) {
        const input = event.target;
        const url = input.value.trim();

        if (!url) {
          input.classList.remove('is-valid');
          input.classList.remove('is-invalid');
          return true;
        }

        const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/;
        const isValid = youtubeRegex.test(url);

        if (isValid) {
          input.classList.add('is-valid');
          input.classList.remove('is-invalid');
          return true;
        } else {
          input.classList.add('is-invalid');
          input.classList.remove('is-valid');
          return false;
        }
      },

      validateFormSubmission(event) {
        let isValid = true;

        document.querySelectorAll('.file-input').forEach(input => {
          const requirementItemId = input.dataset.requirementItemId;
          const isRequired = input.hasAttribute('required');

          if (isRequired || input.files.length > 0) {
            const inputValid = this.validateFileInputEvent({target: input});
            isValid = isValid && inputValid;
          }
        });

        document.querySelectorAll('[data-action*="input->file-validator#validateYouTubeUrl"]').forEach(input => {
          const inputValid = this.validateYouTubeUrlEvent({target: input});
          isValid = isValid && inputValid;
        });

        if (!isValid) {
          event.preventDefault();
          const firstError = document.querySelector('.is-invalid');
          if (firstError) {
            firstError.scrollIntoView({behavior: 'smooth', block: 'center'});
          }
        }
      }
    };

    document.querySelectorAll('[data-controller="character-counter"]').forEach(function(counterElement) {
      const input = counterElement.querySelector('[data-character-counter-target="input"]');
      const counter = counterElement.querySelector('[data-character-counter-target="counter"]');

      if (input && counter) {
        counter.textContent = input.value.length;

        input.addEventListener('input', function() {
          counter.textContent = input.value.length;

          if (input.value.length > 1000) {
            counter.classList.add('text-danger');
            counter.classList.remove('text-secondary');
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
          } else if (input.value.length > 0) {
            counter.classList.add('text-secondary');
            counter.classList.remove('text-danger');
            input.classList.add('is-valid');
            input.classList.remove('is-invalid');
          } else {
            counter.classList.add('text-secondary');
            counter.classList.remove('text-danger');
            input.classList.remove('is-valid');
            input.classList.remove('is-invalid');
          }
        });

        if (input.value) {
          const event = new Event('input');
          input.dispatchEvent(event);
        }
      }
    });

    fileValidator.init();
  });
</script>
