<%= simple_form_for(@candidat) do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <div class="form-inputs bg-white p-3 rounded-4 shadow-sm">
    <h2>Informations</h2>
    <%# --- Personal Info --- %>
    <div class="d-flex flex-column flex-sm-row gap-3 mt-3">
      <%= f.input :first_name,
                  label: t('candidats.form.first_name'),
                  input_html: {
                    class: "border border-0 mb-0",
                    disabled: @candidat.first_name.present?
                  } %>
      <%= f.input :last_name,
                  label: t('candidats.form.last_name'),
                  input_html: {
                    class: "border border-0 mb-0",
                    disabled: @candidat.last_name.present?
                  } %>
      <%= f.input :birthdate,
                  as: :date,
                  html5: true,
                  label: t('candidats.form.birthdate'),
                  input_html: {
                    class: "border border-0 mb-0",
                    disabled: @candidat.birthdate.present?
                  },
                  hint: t('candidats.form.birthdate_hint') %>
      <%= f.input :voice_type, as: :select, label: t('candidats.form.voice_type'), input_html: {class:"border border-0  mb-0"}, collection: Candidat.voice_types.keys.map { |type| [I18n.t("candidats.form.voice_types.#{type}"), type] } %>
    </div>
    <div class="d-flex align-items-start gap-2">
      <p class="mb-0"><%= t('candidats.form.nationality') %>: </p>
      <%= f.country_select :nationality, {only: ["AM", "AT", "BY", "BE", "BA", "BG", "CH", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GE", "GI", "GR", "HU", "IE", "IS", "IT", "LT", "LU", "LV", "NO", "NL", "PO", "PL", "PT", "RO", "SE", "SI", "SK", "TR", "UA"], selected: "FR"}, { class: "mb-3 p-2 bg-light border rounded" }  %>
    </div>
    <div class="d-flex flex-column flex-sm-row gap-3 mt-3">
      <%= f.input :iban, label: t('candidats.form.iban'), input_html: {class:"border border-0 mb-0"}, hint: t('candidats.form.iban_hint') %>
    </div>

    <%# --- File Inputs Row --- %>
    <div class="row g-3 mb-3">
      <div class="col-md-4">
        <div class="form-group">
          <%= f.label t('candidats.form.portrait'), required: true, class: 'form-label' %>
          <%= render InfoboxComponent.new(title: t('candidats.form.portrait'), text: t('candidats.form.portrait_required_hint'), icon: 'fas fa-exclamation-circle') %>

          <!-- Prévisualisation qui agit comme bouton d'upload -->
          <div class="text-center mb-3">
          <% if @candidat.portrait.attached? %>
              <div class="position-relative d-inline-block">
                <%= image_tag url_for(@candidat.portrait), class: "img-fluid rounded", style: "max-height: 200px;", id: "upload_portrait_portrait_file_preview" %>
                <%= link_to purge_portrait_candidat_path(@candidat),
                      class: "btn btn-sm btn-outline-secondary rounded-circle position-absolute",
                      style: "width: 28px; height: 28px; padding: 0; display: flex; align-items: center; justify-content: center; background-color: rgba(255,255,255,0.8); top: 5px; right: 5px;",
                      data: { turbo_method: :delete, turbo_confirm: t('image_cropper.delete_confirm') } do %>
                  <i class="fas fa-times" style="font-size: 14px;"></i>
                <% end %>
              </div>
              <div class="mt-2" id="upload-status-portrait">
                <small class="text-success"><i class="fas fa-check-circle"></i> <%= t('image_cropper.image_saved') %></small>
            </div>
          <% else %>
              <div class="upload-placeholder p-3 border rounded d-flex flex-column align-items-center justify-content-center"
                   style="height: 200px; cursor: pointer;"
                   id="upload_portrait_portrait_file_preview">
                <i class="fas fa-upload fa-3x mb-3 text-muted"></i>
                <p class="text-muted"><%= t('image_cropper.click_to_select_photo') %></p>
              </div>
            <% end %>
          </div>

          <!-- Ajouter un attribut data pour l'ID du candidat -->
          <div data-candidat-id="<%= @candidat.id %>">
            <%= render "common/image_cropper",
                model: "candidat",
                field: "portrait",
                aspect_ratio: 0.75, # 3:4 vertical portrait ratio
                display_width: 500,
                item_count: "portrait" %>
            </div>

          <%= f.input :portrait, as: :hidden,
                     input_html: {
                       class: "image-hidden-input",
                       id: "candidat_portrait"
                     } %>
        </div>
      </div>
      <div class="col-md-4">
        <div class="form-group">
          <%= f.label t('candidats.form.artistic_photo'), class: 'form-label', required: true %>
          <%= render InfoboxComponent.new(title: t('candidats.form.artistic_photo'), text: t('candidats.form.artistic_photo_required_hint'), icon: 'fas fa-exclamation-circle') %>
          <% if @candidat.artistic_photo.attached? %>
            <div class="mb-2">
              <div id="artistic-photo-preview-container" class="preview-container">
                <%= image_tag @candidat.artistic_photo, class: "w-100", id: "artistic-photo-preview" %>
                <div class="mt-1">
                  <span id="artistic-photo-filename"><%= @candidat.artistic_photo.filename %></span>
                </div>
              </div>
            </div>
            <small class="text-muted mb-2 d-block"><%= t('global.actions.replace_image_hint') || "Pour remplacer cette image, téléchargez une nouvelle photo ci-dessous" %></small>
          <% else %>
            <div id="artistic-photo-preview-container" class="preview-container d-none">
              <img src="" id="artistic-photo-preview" class="img-thumbnail" style="max-height: 200px;">
              <div class="mt-1">
                <span id="artistic-photo-filename"></span>
              </div>
            </div>
          <% end %>
          <%= f.file_field :artistic_photo, class: "form-control",
                           accept: "image/png, image/jpeg",
                           onchange: "previewImage(this, 'artistic-photo-preview', 'artistic-photo-preview-container', 'artistic-photo-filename')" %>
        </div>
      </div>
      <div class="col-md-4">
        <div class="form-group">
          <%= f.label t('candidats.form.cv_english'), class: 'form-label' %>
          <div class="file-upload-wrapper">
            <% if @candidat.cv_english.attached? %>
              <div class="d-flex align-items-center mb-2">
                <i class="fas fa-file-pdf text-danger me-2" style="font-size: 1.5rem;"></i>
                <div class="flex-grow-1">
                  <small class="text-success d-block"><%= @candidat.cv_english.filename %></small>
                </div>
              </div>

              <!-- Prévisualisation du PDF -->
              <div class="mb-3 border rounded">
                <embed src="<%= url_for(@candidat.cv_english) %>" type="application/pdf" width="100%" height="300px" />
              </div>

              <small class="text-muted mb-2 d-block"><%= t('global.actions.replace_file_hint') || "Pour remplacer ce fichier, téléchargez un nouveau document ci-dessous" %></small>
            <% else %>
              <div id="cv-english-preview-container" class="d-flex align-items-center mb-2 d-none">
                <i class="fas fa-file-pdf text-danger me-2" style="font-size: 1.5rem;"></i>
                <div class="flex-grow-1">
                  <small id="cv-english-filename" class="text-success d-block"></small>
                </div>
              </div>
            <% end %>
            <%= f.file_field :cv_english, class: 'form-control form-control-sm',
                  onchange: "previewFile(this, 'cv-english-preview-container', 'cv-english-filename')" %>
          </div>
          <% if @candidat.errors[:cv_english].any? %>
            <small class="error-message text-danger d-block mt-1">
              <%= @candidat.errors[:cv_english].to_sentence %>
            </small>
          <% end %>
        </div>
      </div>
    </div>
    <%# --- End File Inputs Row --- %>

    <%# --- Teacher and Banner Color Row --- %>
    <div class="row g-3 mb-3">
      <div class="col-md-6">
        <%= f.input :last_teacher, label: t('candidats.form.last_teacher'), hint: t('candidats.form.last_teacher_hint'), required: true %>
      </div>
      <div class="col-md-6">
        <%= f.input :banner_color, as: :color, label: t('candidats.form.banner_color'), input_html: { style: "height: 50px;" } %>
      </div>
    </div>
    <%# --- End Teacher and Banner Color Row --- %>

    <%# --- Translation Info and Biographies --- %>
    <p class="bg-info-secondary p-3 text-secondary align-self-start rounded-8"> <i class="fas fa-info-circle text-secondary pe-2"></i><%= t('candidats.form.translation_info') %>
      <a href="https://www.deepl.com/translator" target="_blank" class="text-primary">DeepL</a> ou
      <a href="https://chat.openai.com/" target="_blank" class="text-primary">ChatGPT</a>
    </p>

    <div class="row">
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.short_bio') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/300 </small>
          </div>
          <%= f.input :short_bio, label: false, placeholder: t('candidats.form.short_bio_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.short_bio_en') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/300 </small>
          </div>
          <%= f.input :short_bio_en, label: false, placeholder: t('candidats.form.short_bio_en_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.medium_bio') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/600 </small>
          </div>
          <%= f.input :medium_bio, label: false, placeholder: t('candidats.form.medium_bio_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.medium_bio_en') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/600 </small>
          </div>
          <%= f.input :medium_bio_en, label: false, placeholder: t('candidats.form.medium_bio_en_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.long_bio') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/1200 </small>
          </div>
          <%= f.input :long_bio, label: false, placeholder: t('candidats.form.long_bio_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
      <div class="col">
        <div class="form-group" data-controller="character-counter">
          <div class="d-flex gap-3 align-items-center">
            <%= f.label t('candidats.form.long_bio_en') %>
            <small class="text-secondary"><span data-character-counter-target="counter">0</span>/1200 </small>
          </div>
          <%= f.input :long_bio_en, label: false, placeholder: t('candidats.form.long_bio_en_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
        </div>
      </div>
    </div>

    <div class="form-group" data-controller="character-counter">
      <div class="d-flex gap-3 align-items-center">
        <%= f.label t('candidats.form.repertoire') %>
        <small class="text-secondary"><span data-character-counter-target="counter">0</span>/1200 </small>
      </div>
      <%= f.input :repertoire, label: false, placeholder: t('candidats.form.repertoire_placeholder'), input_html: { class:"border border-0", data: { action: "input->character-counter#update", character_counter_target: "input", class:"border border-0 "} } %>
    </div>

    <%# --- Experiences --- %>
    <h3 id="experiences-form-section"><%= t('candidats.form.experiences_title') %></h3>
    <div data-controller="experiences">
      <template data-experiences-target="template">
        <%= f.simple_fields_for :experiences, Experience.new, child_index: 'NEW_RECORD' do |experience| %>
          <%= render "experience_fields", f: experience %>
        <% end %>
      </template>

      <div data-experiences-target="container">
        <%= f.simple_fields_for :experiences do |experience| %>
          <%= render "experience_fields", f: experience %>
        <% end %>
      </div>

      <div>
        <button type="button" data-action="experiences#addExperience" class="btn btn-success">
          <i class="fas fa-plus"></i> <%= t('candidats.experiences_section.add_experience') %>
        </button>
      </div>
    </div>

    <%# --- Education --- %>
    <h3 id="education-form-section" class="mt-3"><%= t('candidats.form.education_title') %></h3>
    <div data-controller="educations">
      <template data-educations-target="template">
        <%= f.simple_fields_for :educations, Education.new, child_index: 'NEW_RECORD' do |education| %>
          <%= render "education_fields", f: education %>
        <% end %>
      </template>

      <div data-educations-target="container">
        <%= f.simple_fields_for :educations do |education| %>
          <%= render "education_fields", f: education %>
        <% end %>
      </div>

      <div>
        <button type="button" data-action="educations#addEducation" class="btn btn-success">
          <i class="fas fa-plus"></i> <%= t('candidats.education_section.add_education') %>
        </button>
      </div>
    </div>
  </div>

  <div class="form-actions text-center mt-4">
    <%= f.button :submit, t('candidats.form.save'), class: "btn btn-success" %>
  </div>
<% end %>

<% content_for :page_scripts do %>
  <script>
    function previewImage(input, previewId, containerId, filenameId) {
      const file = input.files[0];
      if (file) {
        const reader = new FileReader();

        reader.onload = function(e) {
          document.getElementById(previewId).src = e.target.result;
          document.getElementById(containerId).classList.remove('d-none');
          document.getElementById(filenameId).textContent = file.name;
        }

        reader.readAsDataURL(file);
      }
    }

    function previewFile(input, containerId, filenameId) {
      const file = input.files[0];
      if (file) {
        document.getElementById(containerId).classList.remove('d-none');
        document.getElementById(filenameId).textContent = file.name;
      }
    }

    // Direct override of the AJAX upload function for portrait
    document.addEventListener('DOMContentLoaded', function() {
      // Make the placeholder clickable to trigger the file input
      const portraitPlaceholder = document.getElementById('upload_portrait_portrait_file_preview');
      if (portraitPlaceholder && portraitPlaceholder.classList.contains('upload-placeholder')) {
        portraitPlaceholder.addEventListener('click', function() {
          document.getElementById('upload_portrait_portrait_file_field').click();
        });
      }

      // Get the candidate ID
      const candidatId = document.querySelector('[data-candidat-id]')?.dataset?.candidatId;
      if (!candidatId) return;

      // Override the AJAX call completely
      const originalAjax = $.ajax;
      $.ajax = function(options) {
        // Check if this is the image upload AJAX call
        if (options.url && options.url.includes('upload_item_image')) {
          console.log('Intercepting AJAX call to upload_item_image');

          // Replace with our candidat upload endpoint
          const locale = document.documentElement.lang || 'fr';
          options.url = `/${locale}/candidats/${candidatId}/upload_portrait`;
          console.log('Redirecting to:', options.url);

          // Make sure we're sending the image correctly
          if (options.data instanceof FormData) {
            // Keep only the image data and remove item_id
            const image = options.data.get('image');
            options.data = new FormData();
            options.data.append('image', image);
          }
        }

        // Call the original AJAX function with our modified options
        return originalAjax.apply(this, arguments);
      };

      // Also handle the delete button to use turbo correctly
      document.querySelectorAll('a[href*="purge_portrait"]').forEach(function(link) {
        link.addEventListener('click', function(e) {
          e.preventDefault();

          if (confirm(this.dataset.turboConfirm || "<%= t('image_cropper.delete_confirm') %>")) {
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            fetch(this.href, {
              method: 'DELETE',
              headers: {
                'X-CSRF-Token': csrfToken,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              credentials: 'same-origin'
            }).then(response => {
              if (response.ok) {
                // Reload the page to show the updated state
                window.location.reload();
              } else {
                console.error('Error deleting portrait:', response.statusText);
                alert("<%= t('image_cropper.upload_error', message: '') %>" + response.statusText);
              }
            }).catch(error => {
              console.error('Error deleting portrait:', error);
              alert("<%= t('image_cropper.upload_error', message: '') %>" + error);
            });
          }
        });
      });
    });

    // Direct patch for the image cropper
    document.addEventListener('DOMContentLoaded', function() {
      // Wait for the cropper script to be fully loaded
      setTimeout(function() {
        // Check if we're on a candidat form
        const candidatId = document.querySelector('[data-candidat-id]')?.dataset?.candidatId;
        if (candidatId) {
          console.log('Detected candidat form with ID:', candidatId);

          // Find the button element that triggers the AJAX upload
          const cropButton = document.getElementById('button_portrait_portrait');
          if (cropButton) {
            // Store the original click handler
            const originalClickHandler = cropButton.onclick;

            // Replace with our custom handler
            cropButton.onclick = function(event) {
              console.log('Intercepting crop button click');

              // Get the cropper instance
              const image = document.getElementById('upload_portrait_portrait_image');
              if (!image || !image.cropper) {
                console.error('Cropper not initialized');
                return originalClickHandler.call(this, event);
              }

              // Get the cropped canvas - using 3:4 aspect ratio for portrait
              const croppedCanvas = image.cropper.getCroppedCanvas({
                maxWidth: 2000,
                maxHeight: 2000,
                aspectRatio: 0.75 // 3:4 vertical portrait ratio
              });

              if (!croppedCanvas) {
                console.error('Failed to get cropped canvas');
                return originalClickHandler.call(this, event);
              }

              // Convert to blob
              croppedCanvas.toBlob(function(blob) {
                // Create a new file object
                const fileName = "portrait.jpg";
                const newFile = new File([blob], fileName, {type: "image/jpeg"});

                // Update preview
                const preview = document.getElementById('upload_portrait_portrait_file_preview');
                if (preview) {
                  preview.src = croppedCanvas.toDataURL('image/jpeg');
                  if (preview.classList.contains('upload-placeholder')) {
                    preview.classList.remove('upload-placeholder');
                    preview.innerHTML = '';
                    preview.className = 'img-fluid rounded';
                    preview.style.maxHeight = '200px';
                  }
                }

                // Create FormData
                const formData = new FormData();
                formData.append('image', newFile);

                // Get CSRF token
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                // Construct the upload URL for candidat
                const locale = document.documentElement.lang || 'fr';
                const uploadUrl = `/${locale}/candidats/${candidatId}/upload_portrait`;

                console.log('Uploading to candidat endpoint:', uploadUrl);

                // Show loading indicator
                const statusDiv = document.getElementById('upload-status-portrait') ||
                                 document.createElement('div');
                statusDiv.id = 'upload-status-portrait';
                statusDiv.className = 'mt-2';
                statusDiv.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div> <small><%= t("image_cropper.uploading") %></small>';

                if (!document.getElementById('upload-status-portrait')) {
                  const container = preview.parentNode;
                  container.parentNode.appendChild(statusDiv);
                }

                // Send AJAX request
                fetch(uploadUrl, {
                  method: 'POST',
                  body: formData,
                  headers: {
                    'X-CSRF-Token': csrfToken
                  },
                  credentials: 'same-origin'
                })
                .then(response => response.json())
                .then(data => {
                  console.log('Upload successful:', data);
                  var statusMessage = '<small class="text-success"><i class="fas fa-check-circle"></i> <%= t("image_cropper.upload_success") %></small>';

                  if (data.metadata) {
                    var meta = data.metadata;
                    if (meta.dimensions && meta.resolution) {
                      // Créer une section dédiée pour les métadonnées avec un style plus visible
                      statusMessage += '<div class="metadata-info mt-2 p-2 border rounded bg-light">';
                      statusMessage += '<h6 class="mb-1"><i class="fas fa-info-circle"></i> <%= t("image_cropper.image_info") %></h6>';
                      statusMessage += '<div class="d-flex flex-column">';

                      // Dimensions avec icône
                      statusMessage += '<div class="mb-1"><i class="fas fa-ruler-combined text-primary me-1"></i> <strong><%= t("image_cropper.dimensions") %>:</strong> ' + meta.dimensions.width + ' × ' + meta.dimensions.height + ' <%= t("image_cropper.px") %></div>';

                      // DPI avec icône et mise en évidence
                      var dpiX = meta.resolution[0];
                      var dpiY = meta.resolution[1];

                      // Ajouter une classe de couleur en fonction de la valeur du DPI
                      var dpiClass = 'text-success';
                      if (dpiX < 300) dpiClass = 'text-warning';
                      if (dpiX < 150) dpiClass = 'text-danger';

                      statusMessage += '<div class="' + dpiClass + '"><i class="fas fa-compress-arrows-alt me-1"></i> <strong><%= t("image_cropper.resolution") %>:</strong> ' +
                        dpiX + ' × ' + dpiY + ' <%= t("image_cropper.dpi") %></div>';

                      // Taille du fichier si disponible
                      if (meta.size) {
                        var fileSizeKB = Math.round(meta.size / 1024);
                        var fileSizeMB = (fileSizeKB / 1024).toFixed(2);
                        var sizeText = fileSizeKB > 1024 ? fileSizeMB + ' MB' : fileSizeKB + ' KB';
                        statusMessage += '<div><i class="fas fa-file-alt text-secondary me-1"></i> <strong><%= t("image_cropper.size") %>:</strong> ' + sizeText + '</div>';
                      }

                      statusMessage += '</div></div>';
                    }
                  }

                  // Update hidden input
                  const hiddenInput = document.getElementById('candidat_portrait');
                  if (hiddenInput) {
                    // Create a new FileList-like object
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(newFile);

                    // Set the file to the hidden input
                    hiddenInput.files = dataTransfer.files;

                    // Trigger change event
                    const event = new Event('change', { bubbles: true });
                    hiddenInput.dispatchEvent(event);
                  }

                  // Close the modal
                  const modalElement = document.getElementById('upload-portrait-portrait-modal');
                  if (modalElement) {
                    const modalInstance = bootstrap.Modal.getInstance(modalElement);
                    if (modalInstance) {
                      modalInstance.hide();
                    }
                  }

                  // Update the status div with our message
                  statusDiv.innerHTML = statusMessage;
                })
                .catch(error => {
                  console.error('Upload failed:', error);
                  statusDiv.innerHTML = '<small class="text-danger"><i class="fas fa-exclamation-circle"></i> <%= t("image_cropper.upload_error", message: "") %>' + error.message + '</small>';
                });

                // Prevent the original handler from executing
                event.stopPropagation();
                return false;
              }, 'image/jpeg', 0.9);

              // Prevent the original handler from executing
              event.preventDefault();
              event.stopPropagation();
              return false;
            };

            console.log('Successfully patched crop button click handler');
          } else {
            console.error('Could not find crop button');
          }
        }
      }, 1000); // Wait for everything to be loaded
    });
  </script>
<% end %>
