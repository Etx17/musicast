<div class="container my-4">
  <h1 class="my-4">Competition Category: <%= @category.name %></h1>

  <div class=" alert-info">
    <i class="fas fa-sync-alt me-2"></i>
    Reload the page to see if new scores have been updates. The latest scores
  </div>

  <%# Tabs for rounds %>
  <ul class="nav nav-tabs mb-4">
    <% @tours.reverse.each_with_index do |tour, index| %>
      <li class="nav-item">
        <a class="nav-link <%= 'active' if index.zero? %>"
           data-bs-toggle="tab"
           href="#round<%= tour.id %>">
          <%= tour.title.upcase %>
        </a>
      </li>
    <% end %>
  </ul>

  <%# Tab content %>
  <div class="tab-content">
    <% @tours.reverse.each_with_index do |tour, index| %>
      <div class="tab-pane fade <%= 'show active' if index.zero? %>"
           id="round<%= tour.id %>">

        <% if tour.scores.attached? %>
          <div class="p-3">
            <div class="d-flex justify-content-between align-items-center pb-2">
              <h3 class="h5 mb-0">Scores from Organization for the tour</h3>
            </div>


              <%= render Table::BaseComponent.new(
                rows: tour.scores,
                columns: [
                  {
                    label: "File Name",
                    value: ->(score_attachment) do
                      link = link_to(
                        score_attachment.filename.to_s,
                        rails_blob_path(score_attachment.blob, disposition: "attachment"),
                        class: "text-white text-decoration-none",
                        title: "Download #{score_attachment.filename}"
                      )
                      content_tag(:span, link, class: "badge bg-primary me-1 mb-1").html_safe
                    end
                  },
                  {
                    label: "Added",
                    value: ->(score_attachment) { l(score_attachment.created_at, format: :short) }
                  }
                ],
                links: [
                  {
                    text: "Download",
                    path: ->(score_attachment) { rails_blob_path(score_attachment.blob, disposition: "attachment") },
                    icon: "fas fa-download",
                  }
                ],
                client: nil
              ) %>
            </div>
        <% end %>

        <% if false #unassigned_performances.any? %>
          <% unassigned_performances = tour.performances.select { |p| p.pianist_accompagnateur.nil? } %>
            <div class="p-3">
              <div class="d-flex justify-content-between align-items-center pb-2">
                <h3 class="h5 mb-0">Unassigned Scores</h3>
              </div>


              <%= render Table::BaseComponent.new(
                rows: unassigned_performances,
                columns: [
                  {
                    label: "Participant",
                    value: ->(performance) { performance.inscription.candidat.full_name }
                  },
                  {
                    label: "Scores",
                    value: ->(performance) do
                      [
                        performance.scores.map(&:filename).join(", "),
                        performance.tour.scores.map(&:filename).join(", ")
                      ].reject(&:blank?).join(" + ")
                    end
                  }
                ],
                links: [
                  {
                    text: "Download Scores",
                    path: ->(performance) { download_scores_performance_path(performance) },
                    icon: "fas fa-download",
                  }
                ],
                client: nil
              ) %>
          </div>
        <% end %>

        <%# Assigned scores grouped by pianist %>
        <% tour.performances.group_by(&:pianist_accompagnateur).each do |pianist, performances| %>
          <% next if pianist.nil? %>
            <div class="p-3">
                <div class="d-flex justify-content-between align-items-center pb-2">
                <h3 class="h5 mb-0">Scores for <%= pianist.full_name %></h3>
                <% has_scores = performances.any? { |p| p.scores.attached? } %>
                <% if has_scores %>
                  <%= link_to "Download All",
                        download_category_tour_pianist_scores_path(
                          @category,
                          tour,
                          pianist_id: pianist.id,
                        ),
                        class: "btn btn-sm btn-outline-primary" %>
                <% else %>
                  <span class="btn btn-sm btn-outline-secondary disabled">Download All</span>
                <% end %>
              </div>

              <%= render Table::BaseComponent.new(
                rows: performances,
                columns: [
                  {
                    label: "Participant",
                    value: ->(performance) { performance.inscription.candidat.full_name }
                  },
                  {
                    label: "Scores",
                    value: ->(performance) do
                      score_pills = []

                      # Add pills for scores attached directly to the performance (bg-primary)
                      if performance.scores.attached?
                        performance.scores.each do |score_attachment|
                          link = link_to(
                            score_attachment.filename.to_s,
                            rails_blob_path(score_attachment.blob, disposition: "attachment"),
                            class: "text-white text-decoration-none",
                            title: "Download #{score_attachment.filename} (Performance Score)"
                          )
                          score_pills << content_tag(:span, link, class: "badge bg-primary me-1 mb-1")
                        end
                      end

                      # Add pills for scores attached to the tour (bg-secondary)
                      if performance.tour.scores.attached?
                        performance.tour.scores.each do |tour_score_attachment|
                          # Generate link using rails_blob_path for direct download of tour score
                          tour_link = link_to(
                            tour_score_attachment.filename.to_s,
                            rails_blob_path(tour_score_attachment.blob, disposition: "attachment"),
                            class: "text-white text-decoration-none", # Style link inside pill
                            title: "Download #{tour_score_attachment.filename} (Tour Score)" # Tooltip clarifying origin
                          )
                          # Create the pill HTML with bg-secondary
                          score_pills << content_tag(:span, tour_link, class: "badge bg-secondary me-1 mb-1")
                        end
                      end

                      # Join all generated pills; mark as HTML safe for rendering
                      # Add a message if no scores are found at all
                      if score_pills.empty?
                        content_tag(:span, "No scores available", class: "text-muted small")
                      else
                        score_pills.join.html_safe
                      end
                    end
                  },
                  {
                    label: "Last Score Uploaded",
                    value: ->(performance) do
                      if performance.scores.attached? && performance.scores.any?
                        latest_timestamp = performance.scores.map(&:created_at).max
                        l(latest_timestamp, format: :short) if latest_timestamp
                      else
                        "N/A"
                      end
                    end
                  }
                ],
              links: [
                {
                  text: ->(performance) {"Download All Scores for #{performance.inscription.candidat.first_name}"},
                  path: ->(performance) { download_scores_performance_path(performance) },
                  icon: "fas fa-download",
                  show_item: ->(performance) { performance.scores.attached? && performance.scores.any? }
                }
              ],
                client: nil
              ) %>
            </div>
        <% end %>
      </div>
    <% end %>
  </div>
</div>

<% content_for :javascript do %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var triggerTabList = [].slice.call(document.querySelectorAll('a[data-bs-toggle="tab"]'))
      triggerTabList.forEach(function(triggerEl) {
        new bootstrap.Tab(triggerEl)
      })
    })
  </script>
<% end %>
